// Daniel Tiepolo Kochinski e Anna Flavia
// Micro controladores 2
/*
        .__                       .__               
    ____ |  |__  __ _____  __ ____ |__|______  ____  
  _/ ___\|  |  \|  |  \  \/ // __ \|  \_  __ \/  _ \ 
  \  \___|   Y  \  |  /\   /\  ___/|  ||  | \(  <_> )
  \___  >___|  /____/  \_/  \___  >__||__|   \____/ 
      \/     \/                 \/                  
  .__        __         .__  .__                      __          
  |__| _____/  |_  ____ |  | |__| ____   ____   _____/  |_  ____  
  |  |/    \   __\/ __ \|  | |  |/ ___\_/ __ \ /    \   __\/ __ \ 
  |  |   |  \  | \  ___/|  |_|  / /_/  >  ___/|   |  \  | \  ___/ 
  |__|___|  /__|  \___  >____/__\___  / \___  >___|  /__|  \___  >
          \/          \/       /_____/      \/     \/          \/ 


LCD:      P1.0 - PIN_RS
          P1.1 - PIN_EN
          P1.4 - PIN_D4
          P1.5 - PIN_D5
          P1.6 - PIN_D6
          P1.7 - PIN_D7

TRIAC:    P1.2 (LED DE TESTE)

DETECTOR: P1.3

BOTOES:   P2.0 - MENOS TEMPERATURA
          P2.1 - MAIS TEMPERATURA

SENSOR:   P2.3

*/

#include <msp430g2553.h>
#include <stdint.h>
#include "onewire.h"
#include "delay.h"
#include "hd44780.h"


float temp_sensor, temp_usuario=25.0;
/***************************************************************/
#pragma vector=PORT1_VECTOR

__interrupt void detector(void)
{
  if((P1IFG & BIT3) == BIT3){
    if(temp_sensor>=temp_usuario)
          P1OUT &= ~(BIT2);
        else
          P1OUT |= BIT2;
  }
  P1IFG &= ~(BIT3);
}

/***************************************************************/
#pragma vector=PORT2_VECTOR

__interrupt void botao(void)
{
  if((P2IFG & BIT0) == BIT0){
    temp_usuario--;
    DELAY_MS(200);
  }
  if((P2IFG & BIT1) == BIT1){
    temp_usuario++;
    DELAY_MS(200);
  }
  P2IFG &= ~(BIT0 + BIT1);
}

/***************************************************************/


void ow_portsetup() {
	OWPORTDIR |= OWPORTPIN;
	OWPORTOUT |= OWPORTPIN;
	OWPORTREN |= OWPORTPIN;
}

/***************************************************************/

float ReadDS1820 ( void )
{
	unsigned int i;
	uint16_t byte = 0;
	for(i = 16; i > 0; i--){
		byte >>= 1;
		if (onewire_read_bit()) {
			byte |= 0x8000;
		}
  }
  return byte;
}


float GetData(void)
{
    uint16_t temp;
	  onewire_reset();
	  onewire_write_byte(0xcc); // skip ROM command
	  onewire_write_byte(0x44); // convert T command
	  OW_HI
	  DELAY_MS(750); // at least 750 ms for the default 12-bit resolution
	  onewire_reset();
	  onewire_write_byte(0xcc); // skip ROM command
	  onewire_write_byte(0xbe); // read scratchpad command
	  temp = ReadDS1820();
    if(temp<0x8000){
      temp_sensor = temp*0.0625;
      return(temp_sensor);
        //return(temp*0.0625);
    }
    else
    {
        temp=(~temp)+1;
        temp_sensor = temp*0.0625;
        return(temp_sensor);
        //return(temp*0.0625);
    }
}

int onewire_reset()
{
	OW_LO
	DELAY_US(480); // 480us minimum
	OW_RLS
  DELAY_US(40); // slave waits 15-60us
  if (OWPORTIN & OWPORTPIN) return 1; // line should be pulled down by slave
  DELAY_US(300); // slave TX presence pulse 60-240us
  if (!(OWPORTIN & OWPORTPIN)) return 2; // line should be "released" by slave
  return 0;
}

//#####################################################################

void onewire_write_bit(int bit)
{
//  DELAY_US(1); // recovery, min 1us
  OW_HI
  if (bit) {
	OW_LO
    DELAY_US(5); // max 15us
	OW_RLS	// input
    DELAY_US(56);
  }
  else {
	  OW_LO
	  DELAY_US(60); // min 60us
	  OW_RLS	// input
	  DELAY_US(1);
  }
 }

//#####################################################################

int onewire_read_bit()
{
  int bit=0;
//  DELAY_US(1); // recovery, min 1us
  OW_LO
  DELAY_US(5); // hold min 1us
  OW_RLS
  DELAY_US(10); // 15us window
  if (OWPORTIN & OWPORTPIN) {
	  bit = 1;
  }
  DELAY_US(46); // rest of the read slot
  return bit;
}

//#####################################################################

void onewire_write_byte(uint8_t byte)
{
  int i;
  for(i = 0; i < 8; i++)
  {
    onewire_write_bit(byte & 1);
    byte >>= 1;
  }
}

//#####################################################################

uint8_t onewire_read_byte()
{
	unsigned int i;
  uint8_t byte = 0;
  for(i = 0; i < 8; i++)
  {
    byte >>= 1;
    if (onewire_read_bit()) byte |= 0x80;
  }
  return byte;
}

int main()
{
	WDTCTL = WDTPW + WDTHOLD; //Stop watchdog timer
	BCSCTL1 = CALBC1_1MHZ;
	DCOCTL = CALDCO_1MHZ;
    InitializeLcm();
    ClearLcmScreen();
    ow_portsetup();
    
    //configuração dos botoes
    P2SEL &= ~(BIT0+BIT1);             // Configura como GPIO
    P2DIR &= ~(BIT0+BIT1);             // Configura como entrada
    P2REN |= (BIT0+BIT1);                // habilita resistor de pull-up
    P2OUT |= (BIT0+BIT1);                // configura resistor de pull-up
    P2IES |= (BIT0+BIT1);                // define sensivel a borda de descida
    P2IE |= (BIT0+BIT1);                 // habilita a interrupcao
    P2IFG &= ~(BIT0+BIT1);             // limpa o flag de interrupcao
    //**************************
    
    //configuração do led(triac)
    P1SEL &= ~(BIT2);
    P1SEL2 &= ~(BIT2);
    P1DIR |= BIT2;
    //**************************
    
    P1SEL &= ~(BIT3);
    P1SEL2 &= ~(BIT3);
    P1DIR &= ~(BIT3);             // Configura como entrada
    P1REN |= (BIT3);                // habilita resistor de pull-up
    P1OUT |= (BIT3);                // configura resistor de pull-up
    P1IES |= (BIT3);                // define sensivel a borda de descida
    P1IE |= (BIT3);                 // habilita a interrupcao
    P1IFG &= ~(BIT3);             // limpa o flag de interrupcao
    
    __enable_interrupt();         // habilita as interrupções
//*********************************************************************************
    
    
    for(;;){
	LcmSetCursorPosition(0,0);
	PrintStr("DS18B20");
	LcmSetCursorPosition(0,7);
	HD44780_outdec(GetData()*10, 1);
        
        LcmSetCursorPosition(1,0);
        PrintStr("USUARIO");
        LcmSetCursorPosition(1,7);
        HD44780_outdec(temp_usuario*10, 1);

    }
}
